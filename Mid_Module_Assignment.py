# This Code is an Iterative Solution to the Floyd Warshal Problem
# The code has been adapted from (Shivali Bhadaniya, 2022)
# Which was published on https://favtutor.com/blogs/floyd-warshall-algorithm.
# The code was sigifanctly modfied to conform to 
# PEP8 as well as additional changes to code structure and varaibles. 

import sys # As per Assignement instuctive code, sys needs to be imported to access sys.maxsize.
           # However a very large number could be defined instead.
            
nv = 4  # Number of vertices
INF = sys.maxsize # Use a large number instead inplace of infinity aslo equvalent to sys 

# Define the Floyd Warshal Algorithm 
def floyd(*args):
    """
    This function is an interative implementation of Floyd Warshall algorithm

    Paremeters:
    arugment1 (list): The input is a 4 x 4 matrix comprised of the 4 nested loops within a list

    Returns:
    4 x 4 matrix list of integers with the shortes distance between nodes    
    """
    dist = list(map(lambda p: list(map(lambda q: q, p)), *args))

    # Adding vertices individually using recursion 
    for r in range(nv):
        for p in range(nv):
            for q in range(nv):
                dist[p][q] = min(dist[p][q], dist[p][r] + dist[r][q])
    sol(dist)

# Printing the output
def sol(dist):
    """
    This fucntion prints the output from the Floyd Warshall Aglorithm defined above this

    Parameters:
    The input is a list map of generated by Floyd Aloroghtm 

    Returns: 
    The function will iterate through the mapped list produced by the Floyd function and print it
    
    """
    for p in range(nv):
        for q in range(nv):
            if(dist[p][q] == INF):
                print("INF", end=" ")
            else:
                print(dist[p][q], end="  ")
        print(" ")

G = [[0, 7, INF, 8],    # This is the input Matrix from the assignment 
         [INF, 0, 5, INF],
         [INF, INF, 0, 2],
         [INF, INF, INF, 0]]

H = [[0, 5, INF, INF],   #This is an input Matrix from (Shivali Bhadaniya, 2022), it is also used in unit testing. The correct output is known for this input and is used for validation. This is included here as for of manual testing.
         [50, 0, 15, 5],
         [30, INF, 0, 15],
         [15, INF, 5, 0]] 

print("\nTest 1:\n" )
floyd(G)
print ("\nTest 2:\n")
floyd(H)
print("\n")